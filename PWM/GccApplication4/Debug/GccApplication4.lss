
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000000ee  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  0000011e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000092  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000053  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000c7  00000000  00000000  00000223  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  000002ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000142  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000010  00000000  00000000  00000452  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4b 00 	jmp	0x96	; 0x96 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define F_CPU 16000000UL
#include <avr/io.h>
#include <util/delay.h>
int main(void)
{
	DDRA=0b11111111;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
	DDRD=0b11111111;
  70:	81 bb       	out	0x11, r24	; 17
	TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM10);
  72:	8f b5       	in	r24, 0x2f	; 47
  74:	81 6a       	ori	r24, 0xA1	; 161
  76:	8f bd       	out	0x2f, r24	; 47
	TCCR1B|=(1<<WGM12)|(1<<CS11)|(1<<CS10);
  78:	8e b5       	in	r24, 0x2e	; 46
  7a:	8b 60       	ori	r24, 0x0B	; 11
  7c:	8e bd       	out	0x2e, r24	; 46
    while(1)
    {
		OCR1A=10;
  7e:	2a e0       	ldi	r18, 0x0A	; 10
  80:	30 e0       	ldi	r19, 0x00	; 0
		OCR1B=255;
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	90 e0       	ldi	r25, 0x00	; 0
	DDRD=0b11111111;
	TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM10);
	TCCR1B|=(1<<WGM12)|(1<<CS11)|(1<<CS10);
    while(1)
    {
		OCR1A=10;
  86:	3b bd       	out	0x2b, r19	; 43
  88:	2a bd       	out	0x2a, r18	; 42
		OCR1B=255;
  8a:	99 bd       	out	0x29, r25	; 41
  8c:	88 bd       	out	0x28, r24	; 40
		PORTD|=(0<<PD3)|(1<<PD2)|(0<<PD1)|(1<<PD0);
  8e:	42 b3       	in	r20, 0x12	; 18
  90:	45 60       	ori	r20, 0x05	; 5
  92:	42 bb       	out	0x12, r20	; 18
  94:	f8 cf       	rjmp	.-16     	; 0x86 <main+0x1a>

00000096 <_exit>:
  96:	f8 94       	cli

00000098 <__stop_program>:
  98:	ff cf       	rjmp	.-2      	; 0x98 <__stop_program>
