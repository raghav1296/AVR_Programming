
gyroscope.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000013e  000001d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800062  00800062  000001d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000237  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000015b  00000000  00000000  0000048b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001d9  00000000  00000000  000005e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  000007c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001cc  00000000  00000000  00000844  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000040  00000000  00000000  00000a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00000a50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e3       	ldi	r30, 0x3E	; 62
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 36       	cpi	r26, 0x63	; 99
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 76 00 	call	0xec	; 0xec <main>
  8a:	0c 94 9d 00 	jmp	0x13a	; 0x13a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TWI_init_master>:
#define BAUD 9600
#define baudrate F_CPU/16/BAUD-1
unsigned char address=0x20,read=1,recv_data;
void TWI_init_master(void) // Function to initialize master
{
	TWBR=0x01; // Bit rate
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	80 b9       	out	0x00, r24	; 0
	TWSR=(0<<TWPS1)|(0<<TWPS0); // Setting prescalar bits
  96:	11 b8       	out	0x01, r1	; 1
  98:	08 95       	ret

0000009a <TWI_read_address>:
	// SCL freq= F_CPU/(16+2(TWBR).4^TWPS)
}
void TWI_read_address(unsigned char data)
{
	TWDR=data; // Address and read instruction
  9a:	83 b9       	out	0x03, r24	; 3
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
  9c:	84 e8       	ldi	r24, 0x84	; 132
  9e:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte received
  a0:	06 b6       	in	r0, 0x36	; 54
  a2:	07 fe       	sbrs	r0, 7
  a4:	fd cf       	rjmp	.-6      	; 0xa0 <TWI_read_address+0x6>
	while((TWSR & 0xF8)!= 0x40);  // Check for the acknoledgement
  a6:	81 b1       	in	r24, 0x01	; 1
  a8:	88 7f       	andi	r24, 0xF8	; 248
  aa:	80 34       	cpi	r24, 0x40	; 64
  ac:	e1 f7       	brne	.-8      	; 0xa6 <TWI_read_address+0xc>
}
  ae:	08 95       	ret

000000b0 <TWI_start>:

void TWI_start(void)                      //i2c bus begins
{
	TWBR=0x01;             // Clear TWI interrupt flag, Put start condition on SDA, Enable TWI
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	80 b9       	out	0x00, r24	; 0
	TWCR|=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  b4:	86 b7       	in	r24, 0x36	; 54
  b6:	84 6a       	ori	r24, 0xA4	; 164
  b8:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT))); // Wait till start condition is transmitted
  ba:	06 b6       	in	r0, 0x36	; 54
  bc:	07 fe       	sbrs	r0, 7
  be:	fd cf       	rjmp	.-6      	; 0xba <TWI_start+0xa>
	while((TWSR & 0xF8)!= 0x08); // Check for the acknowledgement
  c0:	81 b1       	in	r24, 0x01	; 1
  c2:	88 7f       	andi	r24, 0xF8	; 248
  c4:	88 30       	cpi	r24, 0x08	; 8
  c6:	e1 f7       	brne	.-8      	; 0xc0 <TWI_start+0x10>
}
  c8:	08 95       	ret

000000ca <TWI_read_data>:
	TWCR= (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
	while(!(TWCR & (1<<TWSTO)));  // Wait till stop condition is transmitted
}
char TWI_read_data(void)                //master receiver mode
{
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
  ca:	84 e8       	ldi	r24, 0x84	; 132
  cc:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte transmitted
  ce:	06 b6       	in	r0, 0x36	; 54
  d0:	07 fe       	sbrs	r0, 7
  d2:	fd cf       	rjmp	.-6      	; 0xce <TWI_read_data+0x4>
	while((TWSR & 0xF8) != 0x58); // Check for the acknoledgement
  d4:	81 b1       	in	r24, 0x01	; 1
  d6:	88 7f       	andi	r24, 0xF8	; 248
  d8:	88 35       	cpi	r24, 0x58	; 88
  da:	e1 f7       	brne	.-8      	; 0xd4 <TWI_read_data+0xa>
	recv_data=TWDR;
  dc:	83 b1       	in	r24, 0x03	; 3
  de:	80 93 62 00 	sts	0x0062, r24
	return recv_data;
}
  e2:	08 95       	ret

000000e4 <transmit>:
void transmit(unsigned char data)
{
	while(!(UCSRA&(1<<UDRE)));
  e4:	5d 9b       	sbis	0x0b, 5	; 11
  e6:	fe cf       	rjmp	.-4      	; 0xe4 <transmit>
	UDR=data;
  e8:	8c b9       	out	0x0c, r24	; 12
  ea:	08 95       	ret

000000ec <main>:
}

int main(void)
{
	DDRB=255;
  ec:	cf ef       	ldi	r28, 0xFF	; 255
  ee:	c7 bb       	out	0x17, r28	; 23
	char a;	
	TWI_init_master();
  f0:	0e 94 49 00 	call	0x92	; 0x92 <TWI_init_master>
	DDRD|=255;
  f4:	81 b3       	in	r24, 0x11	; 17
  f6:	c1 bb       	out	0x11, r28	; 17
	PORTD=0b11111111;
  f8:	c2 bb       	out	0x12, r28	; 18
	UCSRB|=1<<RXEN|1<<TXEN;
  fa:	8a b1       	in	r24, 0x0a	; 10
  fc:	88 61       	ori	r24, 0x18	; 24
  fe:	8a b9       	out	0x0a, r24	; 10
	UCSRC|=1<<URSEL|1<<USBS|1<<UCSZ1|1<<UCSZ0;
 100:	80 b5       	in	r24, 0x20	; 32
 102:	8e 68       	ori	r24, 0x8E	; 142
 104:	80 bd       	out	0x20, r24	; 32
	UBRRL=(unsigned char)(baudrate);
 106:	87 e6       	ldi	r24, 0x67	; 103
 108:	89 b9       	out	0x09, r24	; 9
	UBRRH=(unsigned char)((baudrate)>>8);
 10a:	10 bc       	out	0x20, r1	; 32
	    while(1)
    {
		TWI_start();
 10c:	0e 94 58 00 	call	0xb0	; 0xb0 <TWI_start>
		TWI_read_address(address+read);
 110:	90 91 60 00 	lds	r25, 0x0060
 114:	80 91 61 00 	lds	r24, 0x0061
 118:	89 0f       	add	r24, r25
 11a:	0e 94 4d 00 	call	0x9a	; 0x9a <TWI_read_address>
		a=TWI_read_data();
 11e:	0e 94 65 00 	call	0xca	; 0xca <TWI_read_data>
		transmit(a);
 122:	0e 94 72 00 	call	0xe4	; 0xe4 <transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 126:	2f ef       	ldi	r18, 0xFF	; 255
 128:	85 ea       	ldi	r24, 0xA5	; 165
 12a:	9e e0       	ldi	r25, 0x0E	; 14
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	80 40       	sbci	r24, 0x00	; 0
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0x40>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0x4a>
 136:	00 00       	nop
 138:	e9 cf       	rjmp	.-46     	; 0x10c <main+0x20>

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
