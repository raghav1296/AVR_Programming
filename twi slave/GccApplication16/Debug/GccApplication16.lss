
GccApplication16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  0000021a  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  0000021a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000048  00000000  00000000  0000024a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000037a  00000000  00000000  00000292  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000119  00000000  00000000  0000060c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000264  00000000  00000000  00000725  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000074  00000000  00000000  0000098c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001f5  00000000  00000000  00000a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000038  00000000  00000000  00000bf5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 6b 00 	call	0xd6	; 0xd6 <main>
  74:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <TWI_write_slave>:
	TWAR=0x20; // Fill slave address to TWAR
}

void TWI_write_slave(void) // Function to write data
{
	TWDR= write_data;           // Fill TWDR register whith the data to be sent
  7c:	80 91 61 00 	lds	r24, 0x0061
  80:	83 b9       	out	0x03, r24	; 3
	TWCR= (1<<TWEN)|(1<<TWINT);   // Enable TWI, Clear TWI interrupt flag
  82:	84 e8       	ldi	r24, 0x84	; 132
  84:	86 bf       	out	0x36, r24	; 54
	while((TWSR & 0xF8) != 0xC0); // Wait for the acknowledgement
  86:	81 b1       	in	r24, 0x01	; 1
  88:	88 7f       	andi	r24, 0xF8	; 248
  8a:	80 3c       	cpi	r24, 0xC0	; 192
  8c:	e1 f7       	brne	.-8      	; 0x86 <TWI_write_slave+0xa>
}
  8e:	08 95       	ret

00000090 <TWI_match_write_slave>:
void TWI_match_write_slave(void) //Function to match the slave address and slave dirction bit(write)
{
	while((TWSR & 0xF8)!= 0xA8) // Loop till correct acknoledgement have been received
	{
		// Get acknowlegement, Enable TWI, Clear TWI interrupt flag
		TWCR=(1<<TWEA)|(1<<TWEN)|(1<<TWINT);
  90:	94 ec       	ldi	r25, 0xC4	; 196
	while((TWSR & 0xF8) != 0xC0); // Wait for the acknowledgement
}

void TWI_match_write_slave(void) //Function to match the slave address and slave dirction bit(write)
{
	while((TWSR & 0xF8)!= 0xA8) // Loop till correct acknoledgement have been received
  92:	04 c0       	rjmp	.+8      	; 0x9c <TWI_match_write_slave+0xc>
	{
		// Get acknowlegement, Enable TWI, Clear TWI interrupt flag
		TWCR=(1<<TWEA)|(1<<TWEN)|(1<<TWINT);
  94:	96 bf       	out	0x36, r25	; 54
		while (!(TWCR & (1<<TWINT)));  // Wait for TWINT flag
  96:	06 b6       	in	r0, 0x36	; 54
  98:	07 fe       	sbrs	r0, 7
  9a:	fd cf       	rjmp	.-6      	; 0x96 <TWI_match_write_slave+0x6>
	while((TWSR & 0xF8) != 0xC0); // Wait for the acknowledgement
}

void TWI_match_write_slave(void) //Function to match the slave address and slave dirction bit(write)
{
	while((TWSR & 0xF8)!= 0xA8) // Loop till correct acknoledgement have been received
  9c:	81 b1       	in	r24, 0x01	; 1
  9e:	88 7f       	andi	r24, 0xF8	; 248
  a0:	88 3a       	cpi	r24, 0xA8	; 168
  a2:	c1 f7       	brne	.-16     	; 0x94 <TWI_match_write_slave+0x4>
	{
		// Get acknowlegement, Enable TWI, Clear TWI interrupt flag
		TWCR=(1<<TWEA)|(1<<TWEN)|(1<<TWINT);
		while (!(TWCR & (1<<TWINT)));  // Wait for TWINT flag
	}
}
  a4:	08 95       	ret

000000a6 <TWI_read_slave>:

void TWI_read_slave(void)
{
	// Clear TWI interrupt flag,Get acknowlegement, Enable TWI
	TWCR= (1<<TWINT)|(1<<TWEA)|(1<<TWEN);
  a6:	84 ec       	ldi	r24, 0xC4	; 196
  a8:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT))); // Wait for TWINT flag
  aa:	06 b6       	in	r0, 0x36	; 54
  ac:	07 fe       	sbrs	r0, 7
  ae:	fd cf       	rjmp	.-6      	; 0xaa <TWI_read_slave+0x4>
	while((TWSR & 0xF8)!=0x80); // Wait for acknowledgement
  b0:	81 b1       	in	r24, 0x01	; 1
  b2:	88 7f       	andi	r24, 0xF8	; 248
  b4:	80 38       	cpi	r24, 0x80	; 128
  b6:	e1 f7       	brne	.-8      	; 0xb0 <TWI_read_slave+0xa>
	recv_data=TWDR; // Get value from TWDR
  b8:	83 b1       	in	r24, 0x03	; 3
  ba:	80 93 60 00 	sts	0x0060, r24
  be:	08 95       	ret

000000c0 <TWI_match_read_slave>:
void TWI_match_read_slave(void) //Function to match the slave address and slave dirction bit(read)
{
	while((TWSR & 0xF8)!= 0x60)  // Loop till correct acknoledgement have been received
	{
		// Get acknowlegement, Enable TWI, Clear TWI interrupt flag
		TWCR=(1<<TWEA)|(1<<TWEN)|(1<<TWINT);
  c0:	94 ec       	ldi	r25, 0xC4	; 196
	recv_data=TWDR; // Get value from TWDR
}

void TWI_match_read_slave(void) //Function to match the slave address and slave dirction bit(read)
{
	while((TWSR & 0xF8)!= 0x60)  // Loop till correct acknoledgement have been received
  c2:	04 c0       	rjmp	.+8      	; 0xcc <TWI_match_read_slave+0xc>
	{
		// Get acknowlegement, Enable TWI, Clear TWI interrupt flag
		TWCR=(1<<TWEA)|(1<<TWEN)|(1<<TWINT);
  c4:	96 bf       	out	0x36, r25	; 54
		while (!(TWCR & (1<<TWINT)));  // Wait for TWINT flag
  c6:	06 b6       	in	r0, 0x36	; 54
  c8:	07 fe       	sbrs	r0, 7
  ca:	fd cf       	rjmp	.-6      	; 0xc6 <TWI_match_read_slave+0x6>
	recv_data=TWDR; // Get value from TWDR
}

void TWI_match_read_slave(void) //Function to match the slave address and slave dirction bit(read)
{
	while((TWSR & 0xF8)!= 0x60)  // Loop till correct acknoledgement have been received
  cc:	81 b1       	in	r24, 0x01	; 1
  ce:	88 7f       	andi	r24, 0xF8	; 248
  d0:	80 36       	cpi	r24, 0x60	; 96
  d2:	c1 f7       	brne	.-16     	; 0xc4 <TWI_match_read_slave+0x4>
	{
		// Get acknowlegement, Enable TWI, Clear TWI interrupt flag
		TWCR=(1<<TWEA)|(1<<TWEN)|(1<<TWINT);
		while (!(TWCR & (1<<TWINT)));  // Wait for TWINT flag
	}
}
  d4:	08 95       	ret

000000d6 <main>:

int main(void)
{
	DDRB=0xff;
  d6:	8f ef       	ldi	r24, 0xFF	; 255
  d8:	87 bb       	out	0x17, r24	; 23
unsigned char write_data,recv_data;


void TWI_init_slave(void) // Function to initilaize slave
{
	TWAR=0x20; // Fill slave address to TWAR
  da:	80 e2       	ldi	r24, 0x20	; 32
  dc:	82 b9       	out	0x02, r24	; 2
	while(1)
	{
		PORTB=0x00;
		_delay_ms(500);
		TWI_match_read_slave(); //Function to match the slave address and slave dirction bit(read)
		PORTB=0xFF;
  de:	cf ef       	ldi	r28, 0xFF	; 255
{
	DDRB=0xff;
	TWI_init_slave(); // Function to initilaize slave
	while(1)
	{
		PORTB=0x00;
  e0:	18 ba       	out	0x18, r1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	2f ef       	ldi	r18, 0xFF	; 255
  e4:	89 e6       	ldi	r24, 0x69	; 105
  e6:	98 e1       	ldi	r25, 0x18	; 24
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x12>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x1c>
  f2:	00 00       	nop
		_delay_ms(500);
		TWI_match_read_slave(); //Function to match the slave address and slave dirction bit(read)
  f4:	0e 94 60 00 	call	0xc0	; 0xc0 <TWI_match_read_slave>
		PORTB=0xFF;
  f8:	c8 bb       	out	0x18, r28	; 24
  fa:	2f ef       	ldi	r18, 0xFF	; 255
  fc:	89 e6       	ldi	r24, 0x69	; 105
  fe:	98 e1       	ldi	r25, 0x18	; 24
 100:	21 50       	subi	r18, 0x01	; 1
 102:	80 40       	sbci	r24, 0x00	; 0
 104:	90 40       	sbci	r25, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <main+0x2a>
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0x34>
 10a:	00 00       	nop
		_delay_ms(500);
		PORTB=0x00;
 10c:	18 ba       	out	0x18, r1	; 24
 10e:	2f ef       	ldi	r18, 0xFF	; 255
 110:	89 e6       	ldi	r24, 0x69	; 105
 112:	98 e1       	ldi	r25, 0x18	; 24
 114:	21 50       	subi	r18, 0x01	; 1
 116:	80 40       	sbci	r24, 0x00	; 0
 118:	90 40       	sbci	r25, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <main+0x3e>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <main+0x48>
 11e:	00 00       	nop
		_delay_ms(500);
		TWI_read_slave(); // Function to read data
 120:	0e 94 53 00 	call	0xa6	; 0xa6 <TWI_read_slave>
		PORTB=0x00;
 124:	18 ba       	out	0x18, r1	; 24
 126:	2f ef       	ldi	r18, 0xFF	; 255
 128:	89 e6       	ldi	r24, 0x69	; 105
 12a:	98 e1       	ldi	r25, 0x18	; 24
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	80 40       	sbci	r24, 0x00	; 0
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0x56>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0x60>
 136:	00 00       	nop
		_delay_ms(500);
		write_data=~recv_data; // Togglem the receive data
 138:	80 91 60 00 	lds	r24, 0x0060
 13c:	80 95       	com	r24
 13e:	80 93 61 00 	sts	0x0061, r24
		PORTB=0xFF;
 142:	c8 bb       	out	0x18, r28	; 24
 144:	2f ef       	ldi	r18, 0xFF	; 255
 146:	89 e6       	ldi	r24, 0x69	; 105
 148:	98 e1       	ldi	r25, 0x18	; 24
 14a:	21 50       	subi	r18, 0x01	; 1
 14c:	80 40       	sbci	r24, 0x00	; 0
 14e:	90 40       	sbci	r25, 0x00	; 0
 150:	e1 f7       	brne	.-8      	; 0x14a <main+0x74>
 152:	00 c0       	rjmp	.+0      	; 0x154 <main+0x7e>
 154:	00 00       	nop
		_delay_ms(500);
		PORTB=recv_data;
 156:	80 91 60 00 	lds	r24, 0x0060
 15a:	88 bb       	out	0x18, r24	; 24
 15c:	2f ef       	ldi	r18, 0xFF	; 255
 15e:	89 e6       	ldi	r24, 0x69	; 105
 160:	98 e1       	ldi	r25, 0x18	; 24
 162:	21 50       	subi	r18, 0x01	; 1
 164:	80 40       	sbci	r24, 0x00	; 0
 166:	90 40       	sbci	r25, 0x00	; 0
 168:	e1 f7       	brne	.-8      	; 0x162 <main+0x8c>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <main+0x96>
 16c:	00 00       	nop
		_delay_ms(500);
		PORTB=0x00;
 16e:	18 ba       	out	0x18, r1	; 24
 170:	2f ef       	ldi	r18, 0xFF	; 255
 172:	89 e6       	ldi	r24, 0x69	; 105
 174:	98 e1       	ldi	r25, 0x18	; 24
 176:	21 50       	subi	r18, 0x01	; 1
 178:	80 40       	sbci	r24, 0x00	; 0
 17a:	90 40       	sbci	r25, 0x00	; 0
 17c:	e1 f7       	brne	.-8      	; 0x176 <main+0xa0>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <main+0xaa>
 180:	00 00       	nop
		_delay_ms(500);
		PORTB=TWDR;
 182:	83 b1       	in	r24, 0x03	; 3
 184:	88 bb       	out	0x18, r24	; 24
 186:	2f ef       	ldi	r18, 0xFF	; 255
 188:	89 e6       	ldi	r24, 0x69	; 105
 18a:	98 e1       	ldi	r25, 0x18	; 24
 18c:	21 50       	subi	r18, 0x01	; 1
 18e:	80 40       	sbci	r24, 0x00	; 0
 190:	90 40       	sbci	r25, 0x00	; 0
 192:	e1 f7       	brne	.-8      	; 0x18c <main+0xb6>
 194:	00 c0       	rjmp	.+0      	; 0x196 <main+0xc0>
 196:	00 00       	nop
		_delay_ms(500);
		TWI_match_write_slave(); //Function to match the slave address and slave dirction bit(write)
 198:	0e 94 48 00 	call	0x90	; 0x90 <TWI_match_write_slave>
		TWI_write_slave();       // Function to write data
 19c:	0e 94 3e 00 	call	0x7c	; 0x7c <TWI_write_slave>
 1a0:	9f cf       	rjmp	.-194    	; 0xe0 <main+0xa>

000001a2 <_exit>:
 1a2:	f8 94       	cli

000001a4 <__stop_program>:
 1a4:	ff cf       	rjmp	.-2      	; 0x1a4 <__stop_program>
