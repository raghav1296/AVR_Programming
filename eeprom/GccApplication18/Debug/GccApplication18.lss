
GccApplication18.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000030  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000020d  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000137  00000000  00000000  000003a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000179  00000000  00000000  000004de  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000044  00000000  00000000  00000658  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001c7  00000000  00000000  0000069c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000015b  00000000  00000000  00000863  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000020  00000000  00000000  000009be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 45 00 	call	0x8a	; 0x8a <main>
  64:	0c 94 71 00 	jmp	0xe2	; 0xe2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <EEPROM_write>:
#include <avr/io.h>
#include <util/delay.h>
void EEPROM_write(unsigned int uiAddress, unsigned char ucData)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE))
  6c:	e1 99       	sbic	0x1c, 1	; 28
  6e:	fe cf       	rjmp	.-4      	; 0x6c <EEPROM_write>
	;
	/* Set up address and data registers */
	EEAR = uiAddress;
  70:	9f bb       	out	0x1f, r25	; 31
  72:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
  74:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMWE */
	EECR |= (1<<EEMWE);
  76:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeprom write by setting EEWE */
	EECR |= (1<<EEWE);
  78:	e1 9a       	sbi	0x1c, 1	; 28
  7a:	08 95       	ret

0000007c <EEPROM_read>:
}
unsigned char EEPROM_read(unsigned int uiAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE))
  7c:	e1 99       	sbic	0x1c, 1	; 28
  7e:	fe cf       	rjmp	.-4      	; 0x7c <EEPROM_read>
	;
	/* Set up address register */
	EEAR = uiAddress;
  80:	9f bb       	out	0x1f, r25	; 31
  82:	8e bb       	out	0x1e, r24	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
  84:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
  86:	8d b3       	in	r24, 0x1d	; 29
}
  88:	08 95       	ret

0000008a <main>:
int main(void)
{
    unsigned int a=0;
	char read_memory;
	DDRB=255;
  8a:	8f ef       	ldi	r24, 0xFF	; 255
  8c:	87 bb       	out	0x17, r24	; 23
	PORTB=255;
  8e:	88 bb       	out	0x18, r24	; 24
	/* Return data from data register */
	return EEDR;
}
int main(void)
{
    unsigned int a=0;
  90:	c0 e0       	ldi	r28, 0x00	; 0
  92:	d0 e0       	ldi	r29, 0x00	; 0
	char read_memory;
	DDRB=255;
	PORTB=255;
    while(1)
    {
		if(a>511)a=0;
  94:	00 e0       	ldi	r16, 0x00	; 0
  96:	10 e0       	ldi	r17, 0x00	; 0
  98:	02 c0       	rjmp	.+4      	; 0x9e <main+0x14>
  9a:	c0 2f       	mov	r28, r16
  9c:	d1 2f       	mov	r29, r17
        EEPROM_write(a,PORTB);
  9e:	68 b3       	in	r22, 0x18	; 24
  a0:	ce 01       	movw	r24, r28
  a2:	0e 94 36 00 	call	0x6c	; 0x6c <EEPROM_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	9f ef       	ldi	r25, 0xFF	; 255
  a8:	23 ed       	ldi	r18, 0xD3	; 211
  aa:	80 e3       	ldi	r24, 0x30	; 48
  ac:	91 50       	subi	r25, 0x01	; 1
  ae:	20 40       	sbci	r18, 0x00	; 0
  b0:	80 40       	sbci	r24, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <main+0x22>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <main+0x2c>
  b6:	00 00       	nop
		_delay_ms(1000);
		read_memory=EEPROM_read(a);
  b8:	ce 01       	movw	r24, r28
  ba:	0e 94 3e 00 	call	0x7c	; 0x7c <EEPROM_read>
		PORTB^=read_memory;
  be:	98 b3       	in	r25, 0x18	; 24
  c0:	89 27       	eor	r24, r25
  c2:	88 bb       	out	0x18, r24	; 24
  c4:	9f ef       	ldi	r25, 0xFF	; 255
  c6:	23 ed       	ldi	r18, 0xD3	; 211
  c8:	80 e3       	ldi	r24, 0x30	; 48
  ca:	91 50       	subi	r25, 0x01	; 1
  cc:	20 40       	sbci	r18, 0x00	; 0
  ce:	80 40       	sbci	r24, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0x40>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x4a>
  d4:	00 00       	nop
		_delay_ms(1000);
		a+=2;
  d6:	22 96       	adiw	r28, 0x02	; 2
	char read_memory;
	DDRB=255;
	PORTB=255;
    while(1)
    {
		if(a>511)a=0;
  d8:	c1 15       	cp	r28, r1
  da:	92 e0       	ldi	r25, 0x02	; 2
  dc:	d9 07       	cpc	r29, r25
  de:	e8 f6       	brcc	.-70     	; 0x9a <main+0x10>
  e0:	de cf       	rjmp	.-68     	; 0x9e <main+0x14>

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>
