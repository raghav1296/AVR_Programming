
GccApplication7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000001e4  00000258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000088  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000007c9  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000225  00000000  00000000  00000ae9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002b9  00000000  00000000  00000d0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000128  00000000  00000000  00000fc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000277  00000000  00000000  000010f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000004a7  00000000  00000000  00001367  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000078  00000000  00000000  0000180e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ee       	ldi	r30, 0xE4	; 228
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 be 00 	call	0x17c	; 0x17c <main>
  7a:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_cmd>:
}


void LCD_cmd(unsigned char cmd)
{
	LCD_DATA=cmd&(0xF0);
  82:	98 2f       	mov	r25, r24
  84:	90 7f       	andi	r25, 0xF0	; 240
  86:	98 bb       	out	0x18, r25	; 24
	Control_PORT &= ~(1<<RS);
  88:	c0 98       	cbi	0x18, 0	; 24
	Control_PORT &= ~(1<<RW);
  8a:	c1 98       	cbi	0x18, 1	; 24
	Control_PORT |= (1<<En);	// RS and RW as LOW and EN as HIGH
  8c:	c2 9a       	sbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	ef e9       	ldi	r30, 0x9F	; 159
  90:	ff e0       	ldi	r31, 0x0F	; 15
  92:	31 97       	sbiw	r30, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <LCD_cmd+0x10>
  96:	00 c0       	rjmp	.+0      	; 0x98 <LCD_cmd+0x16>
  98:	00 00       	nop
	_delay_ms(1);
	Control_PORT &= ~(1<<En);	// RS, RW , LOW and EN as LOW
  9a:	c2 98       	cbi	0x18, 2	; 24
  9c:	ef e9       	ldi	r30, 0x9F	; 159
  9e:	ff e0       	ldi	r31, 0x0F	; 15
  a0:	31 97       	sbiw	r30, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <LCD_cmd+0x1e>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <LCD_cmd+0x24>
  a6:	00 00       	nop
	_delay_ms(1);
	LCD_DATA=(cmd<<4)&(0xF0);
  a8:	f0 e1       	ldi	r31, 0x10	; 16
  aa:	8f 9f       	mul	r24, r31
  ac:	c0 01       	movw	r24, r0
  ae:	11 24       	eor	r1, r1
  b0:	88 bb       	out	0x18, r24	; 24
	Control_PORT &= ~(1<<RS);
  b2:	c0 98       	cbi	0x18, 0	; 24
	Control_PORT &= ~(1<<RW);
  b4:	c1 98       	cbi	0x18, 1	; 24
	Control_PORT |= (1<<En);	// RS and RW as LOW and EN as HIGH
  b6:	c2 9a       	sbi	0x18, 2	; 24
  b8:	8f e9       	ldi	r24, 0x9F	; 159
  ba:	9f e0       	ldi	r25, 0x0F	; 15
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <LCD_cmd+0x3a>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <LCD_cmd+0x40>
  c2:	00 00       	nop
	_delay_ms(1);
	Control_PORT &= ~(1<<En);	// RS, RW , LOW and EN as LOW
  c4:	c2 98       	cbi	0x18, 2	; 24
  c6:	ef e9       	ldi	r30, 0x9F	; 159
  c8:	ff e0       	ldi	r31, 0x0F	; 15
  ca:	31 97       	sbiw	r30, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <LCD_cmd+0x48>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <LCD_cmd+0x4e>
  d0:	00 00       	nop
  d2:	08 95       	ret

000000d4 <LCD_write>:
	return;
}

void LCD_write(unsigned char data)
{
	LCD_DATA= data&(0xF0);
  d4:	98 2f       	mov	r25, r24
  d6:	90 7f       	andi	r25, 0xF0	; 240
  d8:	98 bb       	out	0x18, r25	; 24
	Control_PORT |= (1<<RS);
  da:	c0 9a       	sbi	0x18, 0	; 24
	Control_PORT &= ~(1<<RW);
  dc:	c1 98       	cbi	0x18, 1	; 24
	Control_PORT |= (1<<En);	// RS and RW as LOW and EN as HIGH
  de:	c2 9a       	sbi	0x18, 2	; 24
  e0:	ef e9       	ldi	r30, 0x9F	; 159
  e2:	ff e0       	ldi	r31, 0x0F	; 15
  e4:	31 97       	sbiw	r30, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <LCD_write+0x10>
  e8:	00 c0       	rjmp	.+0      	; 0xea <LCD_write+0x16>
  ea:	00 00       	nop
	_delay_ms(1);
	Control_PORT &= ~(1<<En);	// RS, RW , LOW and EN as LOW
  ec:	c2 98       	cbi	0x18, 2	; 24
  ee:	ef e9       	ldi	r30, 0x9F	; 159
  f0:	ff e0       	ldi	r31, 0x0F	; 15
  f2:	31 97       	sbiw	r30, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <LCD_write+0x1e>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <LCD_write+0x24>
  f8:	00 00       	nop
	_delay_ms(1);	// EN and RW as LOW and RS HIGH
	
	LCD_DATA= (data<<4)&(0xF0);
  fa:	f0 e1       	ldi	r31, 0x10	; 16
  fc:	8f 9f       	mul	r24, r31
  fe:	c0 01       	movw	r24, r0
 100:	11 24       	eor	r1, r1
 102:	88 bb       	out	0x18, r24	; 24
	Control_PORT |= (1<<RS);
 104:	c0 9a       	sbi	0x18, 0	; 24
	Control_PORT &= ~(1<<RW);
 106:	c1 98       	cbi	0x18, 1	; 24
	Control_PORT |= (1<<En);	// RS and RW as LOW and EN as HIGH
 108:	c2 9a       	sbi	0x18, 2	; 24
 10a:	8f e9       	ldi	r24, 0x9F	; 159
 10c:	9f e0       	ldi	r25, 0x0F	; 15
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <LCD_write+0x3a>
 112:	00 c0       	rjmp	.+0      	; 0x114 <LCD_write+0x40>
 114:	00 00       	nop
	_delay_ms(1);
	Control_PORT &= ~(1<<En);
 116:	c2 98       	cbi	0x18, 2	; 24
 118:	ef e9       	ldi	r30, 0x9F	; 159
 11a:	ff e0       	ldi	r31, 0x0F	; 15
 11c:	31 97       	sbiw	r30, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <LCD_write+0x48>
 120:	00 c0       	rjmp	.+0      	; 0x122 <LCD_write+0x4e>
 122:	00 00       	nop
 124:	08 95       	ret

00000126 <clear_display>:

// The functions after this comment are the different commands for LCD

void clear_display() // Clears display and returns cursor to the home position (address 0)
{
	LCD_cmd(0x01);
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
 12c:	08 95       	ret

0000012e <init_LCD>:
	    1 *    2    5x 7 dots  1/16  Cannot display 2 lines with 5x10 dot character font
	*/
	// when N = 1 then two lines of display
	// when N = 0
	unsigned char func = (1<<5) | (DL<<4) | (N<<3) | (F<<2);
	LCD_cmd(func);
 12e:	88 e2       	ldi	r24, 0x28	; 40
 130:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>

void init_LCD()
{
	function_set(0,1,0);//DL = 1 for 8-bit interface, N = 1 to set the fonts for 2 line display and if N = 1 then value of F doesn't matter	
	
	clear_display();
 134:	0e 94 93 00 	call	0x126	; 0x126 <clear_display>
	B is to set whether the cursor will blink or not
	0 - Blink off
	1 - Blink on
	*/
	unsigned char display = (1<<3) | (D<<2) | (C<<1) | (B); // formula to generate command byte
	LCD_cmd(display);
 138:	8f e0       	ldi	r24, 0x0F	; 15
 13a:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
	S is to decide Shift
	0 - No Display Shift
	1 - Display Shift
	*/
	unsigned char entry = (1<<2) | (1<<I_D) | (S); // formula to generate command byte
	LCD_cmd(entry);
 13e:	86 e0       	ldi	r24, 0x06	; 6
 140:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
 144:	08 95       	ret

00000146 <print_string>:
	
	LCD_cmd(display_address);
}

void print_string(char word[])
{
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
	unsigned char i=0; // iterating variable
	unsigned char length = (unsigned char)strlen(word); // length of the word
 14e:	fc 01       	movw	r30, r24
 150:	01 90       	ld	r0, Z+
 152:	00 20       	and	r0, r0
 154:	e9 f7       	brne	.-6      	; 0x150 <print_string+0xa>
 156:	31 97       	sbiw	r30, 0x01	; 1
 158:	1e 2f       	mov	r17, r30
 15a:	18 1b       	sub	r17, r24
	
	// Printing the word
	for(i=0;i<length;i++)
 15c:	51 f0       	breq	.+20     	; 0x172 <print_string+0x2c>
 15e:	08 2f       	mov	r16, r24
 160:	c0 2f       	mov	r28, r16
 162:	d9 2f       	mov	r29, r25
	{
	LCD_write(word[i]);
 164:	89 91       	ld	r24, Y+
 166:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_write>
 16a:	8c 2f       	mov	r24, r28
 16c:	80 1b       	sub	r24, r16
{
	unsigned char i=0; // iterating variable
	unsigned char length = (unsigned char)strlen(word); // length of the word
	
	// Printing the word
	for(i=0;i<length;i++)
 16e:	81 17       	cp	r24, r17
 170:	c8 f3       	brcs	.-14     	; 0x164 <print_string+0x1e>
	{
	LCD_write(word[i]);
	//_delay_ms(1000);
	}	
}
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	1f 91       	pop	r17
 178:	0f 91       	pop	r16
 17a:	08 95       	ret

0000017c <main>:
#include<avr/io.h>
#include<util/delay.h>
#include "LCD.h"
#include "LCD.c"
int main(void)
{
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	cd b7       	in	r28, 0x3d	; 61
 182:	de b7       	in	r29, 0x3e	; 62
 184:	2f 97       	sbiw	r28, 0x0f	; 15
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	f8 94       	cli
 18a:	de bf       	out	0x3e, r29	; 62
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	cd bf       	out	0x3d, r28	; 61
	init_LCD();
 190:	0e 94 97 00 	call	0x12e	; 0x12e <init_LCD>
	char name[15]="raghavsonavane";
 194:	8f e0       	ldi	r24, 0x0F	; 15
 196:	e0 e6       	ldi	r30, 0x60	; 96
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	de 01       	movw	r26, r28
 19c:	11 96       	adiw	r26, 0x01	; 1
 19e:	01 90       	ld	r0, Z+
 1a0:	0d 92       	st	X+, r0
 1a2:	8a 95       	dec	r24
 1a4:	e1 f7       	brne	.-8      	; 0x19e <main+0x22>
	DDRA =0x00;
 1a6:	1a ba       	out	0x1a, r1	; 26
	PORTB=255;
 1a8:	8f ef       	ldi	r24, 0xFF	; 255
 1aa:	88 bb       	out	0x18, r24	; 24
	DDRD |=(1<<1);
 1ac:	89 9a       	sbi	0x11, 1	; 17
	DDRD |=(1<<0);
 1ae:	88 9a       	sbi	0x11, 0	; 17
	print_string(name);
 1b0:	ce 01       	movw	r24, r28
 1b2:	01 96       	adiw	r24, 0x01	; 1
 1b4:	0e 94 a3 00 	call	0x146	; 0x146 <print_string>
 1b8:	2f ef       	ldi	r18, 0xFF	; 255
 1ba:	83 ed       	ldi	r24, 0xD3	; 211
 1bc:	90 e3       	ldi	r25, 0x30	; 48
 1be:	21 50       	subi	r18, 0x01	; 1
 1c0:	80 40       	sbci	r24, 0x00	; 0
 1c2:	90 40       	sbci	r25, 0x00	; 0
 1c4:	e1 f7       	brne	.-8      	; 0x1be <main+0x42>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <main+0x4c>
 1c8:	00 00       	nop
	//d=sonar();
	//print_integer(d*100);
	_delay_ms(1000);
}
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	2f 96       	adiw	r28, 0x0f	; 15
 1d0:	0f b6       	in	r0, 0x3f	; 63
 1d2:	f8 94       	cli
 1d4:	de bf       	out	0x3e, r29	; 62
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	cd bf       	out	0x3d, r28	; 61
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	08 95       	ret

000001e0 <_exit>:
 1e0:	f8 94       	cli

000001e2 <__stop_program>:
 1e2:	ff cf       	rjmp	.-2      	; 0x1e2 <__stop_program>
