
GccApplication5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000001ce  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000040  00000000  00000000  000001fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000028e  00000000  00000000  0000023e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000105  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001aa  00000000  00000000  000005d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000064  00000000  00000000  0000077c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001a9  00000000  00000000  000007e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000048  00000000  00000000  00000989  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000030  00000000  00000000  000009d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 7e 00 	call	0xfc	; 0xfc <main>
  64:	0c 94 bb 00 	jmp	0x176	; 0x176 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <left>:
#define F_CPU 16000000
#include <avr/io.h>
#include <util/delay.h>
void left()
{
PORTB=0b00001011;
  6c:	8b e0       	ldi	r24, 0x0B	; 11
  6e:	88 bb       	out	0x18, r24	; 24
OCR1A=0;
  70:	1b bc       	out	0x2b, r1	; 43
  72:	1a bc       	out	0x2a, r1	; 42
OCR1B=200;
  74:	88 ec       	ldi	r24, 0xC8	; 200
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	99 bd       	out	0x29, r25	; 41
  7a:	88 bd       	out	0x28, r24	; 40
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7c:	2f ef       	ldi	r18, 0xFF	; 255
  7e:	83 ed       	ldi	r24, 0xD3	; 211
  80:	90 e3       	ldi	r25, 0x30	; 48
  82:	21 50       	subi	r18, 0x01	; 1
  84:	80 40       	sbci	r24, 0x00	; 0
  86:	90 40       	sbci	r25, 0x00	; 0
  88:	e1 f7       	brne	.-8      	; 0x82 <left+0x16>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <left+0x20>
  8c:	00 00       	nop
  8e:	08 95       	ret

00000090 <right>:
_delay_ms(1000);
}
void right()
{
	PORTB=0b00001110;
  90:	8e e0       	ldi	r24, 0x0E	; 14
  92:	88 bb       	out	0x18, r24	; 24
	OCR1A=200;
  94:	88 ec       	ldi	r24, 0xC8	; 200
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	9b bd       	out	0x2b, r25	; 43
  9a:	8a bd       	out	0x2a, r24	; 42
	OCR1B=0;
  9c:	19 bc       	out	0x29, r1	; 41
  9e:	18 bc       	out	0x28, r1	; 40
  a0:	2f ef       	ldi	r18, 0xFF	; 255
  a2:	83 ed       	ldi	r24, 0xD3	; 211
  a4:	90 e3       	ldi	r25, 0x30	; 48
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <right+0x16>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <right+0x20>
  b0:	00 00       	nop
  b2:	08 95       	ret

000000b4 <forward>:
	_delay_ms(1000);
}
void forward()
{
	PORTB=0b00001010;
  b4:	8a e0       	ldi	r24, 0x0A	; 10
  b6:	88 bb       	out	0x18, r24	; 24
	OCR1A=120;
  b8:	88 e7       	ldi	r24, 0x78	; 120
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	9b bd       	out	0x2b, r25	; 43
  be:	8a bd       	out	0x2a, r24	; 42
	OCR1B=120;
  c0:	99 bd       	out	0x29, r25	; 41
  c2:	88 bd       	out	0x28, r24	; 40
  c4:	2f ef       	ldi	r18, 0xFF	; 255
  c6:	83 ed       	ldi	r24, 0xD3	; 211
  c8:	90 e3       	ldi	r25, 0x30	; 48
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <forward+0x16>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <forward+0x20>
  d4:	00 00       	nop
  d6:	08 95       	ret

000000d8 <backward>:
	_delay_ms(1000);
}
void backward()
{
	PORTB=0b00000101;
  d8:	85 e0       	ldi	r24, 0x05	; 5
  da:	88 bb       	out	0x18, r24	; 24
	OCR1A=120;
  dc:	88 e7       	ldi	r24, 0x78	; 120
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	9b bd       	out	0x2b, r25	; 43
  e2:	8a bd       	out	0x2a, r24	; 42
	OCR1B=120;
  e4:	99 bd       	out	0x29, r25	; 41
  e6:	88 bd       	out	0x28, r24	; 40
  e8:	2f ef       	ldi	r18, 0xFF	; 255
  ea:	83 ed       	ldi	r24, 0xD3	; 211
  ec:	90 e3       	ldi	r25, 0x30	; 48
  ee:	21 50       	subi	r18, 0x01	; 1
  f0:	80 40       	sbci	r24, 0x00	; 0
  f2:	90 40       	sbci	r25, 0x00	; 0
  f4:	e1 f7       	brne	.-8      	; 0xee <backward+0x16>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <backward+0x20>
  f8:	00 00       	nop
  fa:	08 95       	ret

000000fc <main>:
}

int main(void)
{
	int i;
	ADMUX=0b01000000;
  fc:	80 e4       	ldi	r24, 0x40	; 64
  fe:	87 b9       	out	0x07, r24	; 7
	ADCSRA=0b11000111;
 100:	87 ec       	ldi	r24, 0xC7	; 199
 102:	86 b9       	out	0x06, r24	; 6
	DDRA=0b00000000;
 104:	1a ba       	out	0x1a, r1	; 26
	DDRB=0b11111111;
 106:	8f ef       	ldi	r24, 0xFF	; 255
 108:	87 bb       	out	0x17, r24	; 23
	DDRD=0b11111111;
 10a:	81 bb       	out	0x11, r24	; 17
	TCCR0|=(1<<WGM00)|(1<<WGM01)|(1<<COM01)|(1<<COM00)|(1<<CS01)|(1<<CS00);
 10c:	83 b7       	in	r24, 0x33	; 51
 10e:	8b 67       	ori	r24, 0x7B	; 123
 110:	83 bf       	out	0x33, r24	; 51
	TCCR1A|=(1<<COM1A1)|(1<<COM1A0)|(1<<COM1B1)|(1<<COM1B0);
 112:	8f b5       	in	r24, 0x2f	; 47
 114:	80 6f       	ori	r24, 0xF0	; 240
 116:	8f bd       	out	0x2f, r24	; 47
	TCCR1B|=(1<<CS11)|(1<<CS10);
 118:	8e b5       	in	r24, 0x2e	; 46
 11a:	83 60       	ori	r24, 0x03	; 3
 11c:	8e bd       	out	0x2e, r24	; 46
    while(1)
    {
		ADCSRA|=(1<<6);
 11e:	36 9a       	sbi	0x06, 6	; 6
		while(ADCSRA&(1<<6));
 120:	36 99       	sbic	0x06, 6	; 6
 122:	fe cf       	rjmp	.-4      	; 0x120 <main+0x24>
	     i=ADC;	
 124:	84 b1       	in	r24, 0x04	; 4
 126:	95 b1       	in	r25, 0x05	; 5
		PORTB=ADC;
 128:	24 b1       	in	r18, 0x04	; 4
 12a:	35 b1       	in	r19, 0x05	; 5
 12c:	28 bb       	out	0x18, r18	; 24
 12e:	2f ef       	ldi	r18, 0xFF	; 255
 130:	39 e6       	ldi	r19, 0x69	; 105
 132:	48 e1       	ldi	r20, 0x18	; 24
 134:	21 50       	subi	r18, 0x01	; 1
 136:	30 40       	sbci	r19, 0x00	; 0
 138:	40 40       	sbci	r20, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <main+0x38>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <main+0x42>
 13e:	00 00       	nop
        _delay_ms(500);
		if(i<256)
 140:	8f 3f       	cpi	r24, 0xFF	; 255
 142:	91 05       	cpc	r25, r1
 144:	09 f0       	breq	.+2      	; 0x148 <main+0x4c>
 146:	1c f4       	brge	.+6      	; 0x14e <main+0x52>
		left();
 148:	0e 94 36 00 	call	0x6c	; 0x6c <left>
 14c:	e8 cf       	rjmp	.-48     	; 0x11e <main+0x22>
		else if(i<512)
 14e:	81 15       	cp	r24, r1
 150:	22 e0       	ldi	r18, 0x02	; 2
 152:	92 07       	cpc	r25, r18
 154:	1c f4       	brge	.+6      	; 0x15c <main+0x60>
		right();
 156:	0e 94 48 00 	call	0x90	; 0x90 <right>
 15a:	e1 cf       	rjmp	.-62     	; 0x11e <main+0x22>
		else if(i<768)
 15c:	81 15       	cp	r24, r1
 15e:	33 e0       	ldi	r19, 0x03	; 3
 160:	93 07       	cpc	r25, r19
 162:	1c f4       	brge	.+6      	; 0x16a <main+0x6e>
		forward();
 164:	0e 94 5a 00 	call	0xb4	; 0xb4 <forward>
 168:	da cf       	rjmp	.-76     	; 0x11e <main+0x22>
		else if(i<1024)
 16a:	81 15       	cp	r24, r1
 16c:	94 40       	sbci	r25, 0x04	; 4
 16e:	bc f6       	brge	.-82     	; 0x11e <main+0x22>
		backward();
 170:	0e 94 6c 00 	call	0xd8	; 0xd8 <backward>
 174:	d4 cf       	rjmp	.-88     	; 0x11e <main+0x22>

00000176 <_exit>:
 176:	f8 94       	cli

00000178 <__stop_program>:
 178:	ff cf       	rjmp	.-2      	; 0x178 <__stop_program>
