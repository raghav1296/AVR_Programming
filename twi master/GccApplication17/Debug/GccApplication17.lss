
GccApplication17.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000001a4  00000238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800064  00800064  0000023c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000032a  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000013c  00000000  00000000  000005f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000223  00000000  00000000  00000732  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  00000958  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000212  00000000  00000000  000009fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000087  00000000  00000000  00000c0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00000c95  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ea       	ldi	r30, 0xA4	; 164
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 8c 00 	call	0x118	; 0x118 <main>
  8a:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TWI_init_master>:



void TWI_init_master(void) // Function to initialize master
{
	TWBR=0x01; // Bit rate
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	80 b9       	out	0x00, r24	; 0
	TWSR=(0<<TWPS1)|(0<<TWPS0); // Setting prescalar bits
  96:	11 b8       	out	0x01, r1	; 1
  98:	08 95       	ret

0000009a <TWI_start>:
}

void TWI_start(void)
{
	// Clear TWI interrupt flag, Put start condition on SDA, Enable TWI
	TWCR= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  9a:	84 ea       	ldi	r24, 0xA4	; 164
  9c:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT))); // Wait till start condition is transmitted
  9e:	06 b6       	in	r0, 0x36	; 54
  a0:	07 fe       	sbrs	r0, 7
  a2:	fd cf       	rjmp	.-6      	; 0x9e <TWI_start+0x4>
	while((TWSR & 0xF8)!= 0x08); // Check for the acknowledgement
  a4:	81 b1       	in	r24, 0x01	; 1
  a6:	88 7f       	andi	r24, 0xF8	; 248
  a8:	88 30       	cpi	r24, 0x08	; 8
  aa:	e1 f7       	brne	.-8      	; 0xa4 <TWI_start+0xa>
}
  ac:	08 95       	ret

000000ae <TWI_write_address>:
	while((TWSR & 0xF8)!= 0x10); // Check for the acknoledgement
}

void TWI_write_address(unsigned char data)
{
	TWDR=data; // Address and write instruction
  ae:	83 b9       	out	0x03, r24	; 3
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
  b0:	84 e8       	ldi	r24, 0x84	; 132
  b2:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte transmitted
  b4:	06 b6       	in	r0, 0x36	; 54
  b6:	07 fe       	sbrs	r0, 7
  b8:	fd cf       	rjmp	.-6      	; 0xb4 <TWI_write_address+0x6>
	while((TWSR & 0xF8)!= 0x18);  // Check for the acknoledgement
  ba:	81 b1       	in	r24, 0x01	; 1
  bc:	88 7f       	andi	r24, 0xF8	; 248
  be:	88 31       	cpi	r24, 0x18	; 24
  c0:	e1 f7       	brne	.-8      	; 0xba <TWI_write_address+0xc>
}
  c2:	08 95       	ret

000000c4 <TWI_read_address>:

void TWI_read_address(unsigned char data)
{
	TWDR=data; // Address and read instruction
  c4:	83 b9       	out	0x03, r24	; 3
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
  c6:	84 e8       	ldi	r24, 0x84	; 132
  c8:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte received
  ca:	06 b6       	in	r0, 0x36	; 54
  cc:	07 fe       	sbrs	r0, 7
  ce:	fd cf       	rjmp	.-6      	; 0xca <TWI_read_address+0x6>
	while((TWSR & 0xF8)!= 0x40);  // Check for the acknoledgement
  d0:	81 b1       	in	r24, 0x01	; 1
  d2:	88 7f       	andi	r24, 0xF8	; 248
  d4:	80 34       	cpi	r24, 0x40	; 64
  d6:	e1 f7       	brne	.-8      	; 0xd0 <TWI_read_address+0xc>
}
  d8:	08 95       	ret

000000da <TWI_write_data>:

void TWI_write_data(unsigned char data)
{
	TWDR=data; // put data in TWDR
  da:	83 b9       	out	0x03, r24	; 3
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
  dc:	84 e8       	ldi	r24, 0x84	; 132
  de:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte transmitted
  e0:	06 b6       	in	r0, 0x36	; 54
  e2:	07 fe       	sbrs	r0, 7
  e4:	fd cf       	rjmp	.-6      	; 0xe0 <TWI_write_data+0x6>
	while((TWSR & 0xF8) != 0x28); // Check for the acknoledgement
  e6:	81 b1       	in	r24, 0x01	; 1
  e8:	88 7f       	andi	r24, 0xF8	; 248
  ea:	88 32       	cpi	r24, 0x28	; 40
  ec:	e1 f7       	brne	.-8      	; 0xe6 <TWI_write_data+0xc>
}
  ee:	08 95       	ret

000000f0 <TWI_read_data>:

void TWI_read_data(void)
{
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
  f0:	84 e8       	ldi	r24, 0x84	; 132
  f2:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte transmitted
  f4:	06 b6       	in	r0, 0x36	; 54
  f6:	07 fe       	sbrs	r0, 7
  f8:	fd cf       	rjmp	.-6      	; 0xf4 <TWI_read_data+0x4>
	while((TWSR & 0xF8) != 0x58); // Check for the acknoledgement
  fa:	81 b1       	in	r24, 0x01	; 1
  fc:	88 7f       	andi	r24, 0xF8	; 248
  fe:	88 35       	cpi	r24, 0x58	; 88
 100:	e1 f7       	brne	.-8      	; 0xfa <TWI_read_data+0xa>
	recv_data=TWDR;
 102:	83 b1       	in	r24, 0x03	; 3
 104:	80 93 65 00 	sts	0x0065, r24
	PORTB=recv_data;
 108:	88 bb       	out	0x18, r24	; 24
 10a:	08 95       	ret

0000010c <TWI_stop>:
}

void TWI_stop(void)
{
	// Clear TWI interrupt flag, Put stop condition on SDA, Enable TWI
	TWCR= (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
 10c:	84 e9       	ldi	r24, 0x94	; 148
 10e:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWSTO)));  // Wait till stop condition is transmitted
 110:	06 b6       	in	r0, 0x36	; 54
 112:	04 fe       	sbrs	r0, 4
 114:	fd cf       	rjmp	.-6      	; 0x110 <TWI_stop+0x4>
}
 116:	08 95       	ret

00000118 <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 118:	2f ef       	ldi	r18, 0xFF	; 255
 11a:	87 ea       	ldi	r24, 0xA7	; 167
 11c:	91 e6       	ldi	r25, 0x61	; 97
 11e:	21 50       	subi	r18, 0x01	; 1
 120:	80 40       	sbci	r24, 0x00	; 0
 122:	90 40       	sbci	r25, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <main+0x6>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0x10>
 128:	00 00       	nop
int main(void)
{
	_delay_ms(2000);
	DDRB=0xff;
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	87 bb       	out	0x17, r24	; 23
	TWI_init_master();  // Function to initialize TWI
 12e:	0e 94 49 00 	call	0x92	; 0x92 <TWI_init_master>
	while(1)
	{
		if(write_data==0x00)
		write_data=1;
 132:	c1 e0       	ldi	r28, 0x01	; 1
	_delay_ms(2000);
	DDRB=0xff;
	TWI_init_master();  // Function to initialize TWI
	while(1)
	{
		if(write_data==0x00)
 134:	80 91 60 00 	lds	r24, 0x0060
 138:	81 11       	cpse	r24, r1
 13a:	02 c0       	rjmp	.+4      	; 0x140 <main+0x28>
		write_data=1;
 13c:	c0 93 60 00 	sts	0x0060, r28
		
		TWI_start(); // Function to send start condition
 140:	0e 94 4d 00 	call	0x9a	; 0x9a <TWI_start>
		TWI_write_address(address+write); // Function to write address and data direction bit(write) on SDA
 144:	90 91 64 00 	lds	r25, 0x0064
 148:	80 91 62 00 	lds	r24, 0x0062
 14c:	89 0f       	add	r24, r25
 14e:	0e 94 57 00 	call	0xae	; 0xae <TWI_write_address>
		TWI_write_data(255);      // Function to write data in slave
 152:	8f ef       	ldi	r24, 0xFF	; 255
 154:	0e 94 6d 00 	call	0xda	; 0xda <TWI_write_data>
		TWI_stop(); // Function to send stop condition
 158:	0e 94 86 00 	call	0x10c	; 0x10c <TWI_stop>
 15c:	2f ef       	ldi	r18, 0xFF	; 255
 15e:	81 ee       	ldi	r24, 0xE1	; 225
 160:	94 e0       	ldi	r25, 0x04	; 4
 162:	21 50       	subi	r18, 0x01	; 1
 164:	80 40       	sbci	r24, 0x00	; 0
 166:	90 40       	sbci	r25, 0x00	; 0
 168:	e1 f7       	brne	.-8      	; 0x162 <main+0x4a>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <main+0x54>
 16c:	00 00       	nop
		
		
		_delay_ms(100); // Delay of 10 mili second
		
		PORTB=0xff;
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	88 bb       	out	0x18, r24	; 24
		TWI_start();
 172:	0e 94 4d 00 	call	0x9a	; 0x9a <TWI_start>
		TWI_read_address(address+read); // Function to write address and data direction bit(read) on SDA
 176:	90 91 61 00 	lds	r25, 0x0061
 17a:	80 91 62 00 	lds	r24, 0x0062
 17e:	89 0f       	add	r24, r25
 180:	0e 94 62 00 	call	0xc4	; 0xc4 <TWI_read_address>
		TWI_read_data(); // Function to read data from slave
 184:	0e 94 78 00 	call	0xf0	; 0xf0 <TWI_read_data>
		TWI_stop();
 188:	0e 94 86 00 	call	0x10c	; 0x10c <TWI_stop>
 18c:	2f ef       	ldi	r18, 0xFF	; 255
 18e:	87 ea       	ldi	r24, 0xA7	; 167
 190:	91 e6       	ldi	r25, 0x61	; 97
 192:	21 50       	subi	r18, 0x01	; 1
 194:	80 40       	sbci	r24, 0x00	; 0
 196:	90 40       	sbci	r25, 0x00	; 0
 198:	e1 f7       	brne	.-8      	; 0x192 <main+0x7a>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0x84>
 19c:	00 00       	nop
 19e:	ca cf       	rjmp	.-108    	; 0x134 <main+0x1c>

000001a0 <_exit>:
 1a0:	f8 94       	cli

000001a2 <__stop_program>:
 1a2:	ff cf       	rjmp	.-2      	; 0x1a2 <__stop_program>
